// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  username        String   @unique
  email           String   @unique
  password        String
  profilePicture  String?
  bio             String?
  isPrivate       Boolean  @default(false)
  firebaseUid     String?  @unique
  provider        String?  @default("email")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  reactions       Reaction[]
  
  // Followers relationship
  followers       Follow[] @relation("UserFollowers")
  following       Follow[] @relation("UserFollowing")
  
  // Messages
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  conversations    ConversationParticipant[]
  messageReads     MessageRead[]
  messageReactions MessageReaction[]
  
  // Notifications
  sentNotifications     Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")
  
  // Group relationships
  ownedGroups    Conversation[] @relation("GroupOwner")
  adminGroups    GroupAdmin[]   @relation("GroupAdmins")
  
  // Stories
  stories        Story[]
  storyViews     StoryView[]

  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  caption     String?
  image       String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  authorId      String
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  reactions     Reaction[]
  notifications Notification[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id       String @id @default(cuid())
  
  // Relationships
  postId   String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([postId, userId])
  @@map("likes")
}

model Reaction {
  id       String @id @default(cuid())
  emoji    String
  
  // Relationships
  postId   String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([postId, userId])
  @@map("reactions")
}

model Follow {
  id          String @id @default(cuid())
  createdAt   DateTime @default(now())
  
  // Relationships
  followerId  String
  follower    User   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@map("follows")
}

model Conversation {
  id          String   @id @default(cuid())
  isGroup     Boolean  @default(false)
  isAI        Boolean  @default(false)
  name        String?
  description String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Group specific fields
  groupOwnerId    String?
  groupOwner      User?   @relation("GroupOwner", fields: [groupOwnerId], references: [id])
  groupAdmins     GroupAdmin[]
  groupSettings   GroupSettings?
  
  // Relationships
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model GroupAdmin {
  id             String @id @default(cuid())
  
  // Relationships
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation("GroupAdmins", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([conversationId, userId])
  @@map("group_admins")
}

model GroupSettings {
  id                  String  @id @default(cuid())
  isPrivate          Boolean @default(false)
  allowMemberInvites Boolean @default(true)
  requireApproval    Boolean @default(false)
  muteNotifications  Boolean @default(false)
  
  // Relationships
  conversationId String       @unique
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("group_settings")
}

model ConversationParticipant {
  id             String @id @default(cuid())
  
  // Relationships
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id        String   @id @default(cuid())
  content   String?
  messageType String @default("text") // text, image, file
  isAI      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // File attachment fields
  fileUrl   String?
  fileName  String?
  fileType  String?
  fileSize  Int?
  
  // Relationships
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId     String?
  receiver       User?        @relation("MessageReceiver", fields: [receiverId], references: [id])

  // Read receipts and reactions
  reads       MessageRead[]
  reactions   MessageReaction[]

  @@map("messages")
}

model MessageRead {
  id         String   @id @default(cuid())
  readAt     DateTime @default(now())

  // Relationships
  messageId  String
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_reads")
}

model MessageReaction {
  id        String   @id @default(cuid())
  emoji     String
  createdAt DateTime @default(now())

  // Relationships
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}

model Notification {
  id          String   @id @default(cuid())
  type        String   // 'like', 'comment', 'follow', 'message'
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // References
  postId      String?
  post        Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Relationships
  senderId    String
  sender      User     @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId  String
  receiver    User     @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Story {
  id          String   @id @default(cuid())
  mediaUrl    String?
  mediaType   String   @default("text") // text, image, video
  text        String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  views       StoryView[]
  
  @@map("stories")
}

model StoryView {
  id        String   @id @default(cuid())
  viewedAt  DateTime @default(now())
  
  // Relationships
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([storyId, userId])
  @@map("story_views")
}